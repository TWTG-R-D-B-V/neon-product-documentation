function decodeUplink(input){var result={};try{result.data=Decode(input.fPort,input.bytes)}catch(error){result.errors=[error.message]}return result}function Decode(fPort,bytes){var decoded={};if(0!=fPort&&0!=bytes.length&&!handle_generic_messages(fPort,bytes,decoded)){var cursor={value:0};switch(get_protocol_version(bytes)){case 1:case 2:switch(decoded.header=decode_header(bytes,cursor),decoded.header.message_type){case"boot":decoded.boot=decode_boot_msg(bytes,cursor);break;case"activated":decoded.activated=decode_activated_msg(bytes,cursor);break;case"deactivated":decoded.deactivated=decode_deactivated_msg(bytes,cursor);break;case"sensor_event":decoded.sensor_event=decode_sensor_event_msg(bytes,cursor);break;case"device_status":decoded.device_status=decode_device_status_msg(bytes,cursor);break;case"sensor_data":decoded.sensor_data=decode_sensor_data_msg(bytes,cursor,decoded.header.protocol_version);break;default:throw new Error("Invalid message type!")}break;case 3:switch(fPort){case 1:header=decode_header_v3(bytes,cursor),decoded.boot=decode_boot_msg_v3(bytes,cursor),decoded.boot.protocol_version=header.protocol_version;break;case 2:header=decode_header_v3(bytes,cursor),decoded.device_status=decode_device_status_msg_v3(bytes,cursor),decoded.device_status.protocol_version=header.protocol_version;break;case 3:header=decode_header_v3(bytes,cursor),decoded.sensor_event=decode_sensor_event_msg_v3(bytes,cursor),decoded.sensor_event.protocol_version=header.protocol_version;break;case 4:header=decode_header_v3(bytes,cursor),decoded.sensor_data=decode_sensor_data_msg(bytes,cursor,header.protocol_version),decoded.sensor_data.protocol_version=header.protocol_version;break;case 5:header=decode_header_v3(bytes,cursor),decoded.activated=decode_activated_msg_v3(bytes,cursor),decoded.activated.protocol_version=header.protocol_version;break;case 6:header=decode_header_v3(bytes,cursor),decoded.deactivated=decode_deactivated_msg(bytes,cursor),decoded.deactivated.protocol_version=header.protocol_version;break;case 7:decoded.config_update_ans=decode_config_update_ans_msg(bytes,cursor)}break;default:throw new Error("Unsupported protocol version!")}}return decoded}function DecodeRebootInfo(reboot_type,bytes){var cursor={value:0};return decode_reboot_info(reboot_type,bytes,cursor)}function Decoder(obj,fPort){return Decode(fPort,obj)}function DecodeHexString(fPort,hex_string){return Decode(fPort,from_hex_string(hex_string))}function decode_header(bytes,cursor){var header={},bytes=decode_uint8(bytes,cursor);return header.protocol_version=bytes>>4,header.message_type=message_type_lookup(15&bytes),header}function decode_header_v3(bytes,cursor){var header={},bytes=decode_uint8(bytes,cursor);return header.protocol_version=bytes>>4,header}function get_protocol_version(bytes){var cursor={value:0};return decode_uint8(bytes,cursor)>>4}function decode_config_header(bytes,cursor){var header={},bytes=decode_uint8(bytes,cursor);return header.protocol_version=bytes>>4,header.config_type=config_type_lookup(15&bytes),header}function from_hex_string(hex_string){if("string"!=typeof hex_string)throw new Error("hex_string must be a string");if(!hex_string.match(/^[0-9A-F]*$/gi))throw new Error("hex_string contain only 0-9, A-F characters");if(!0&hex_string.length)throw new Error("hex_string length must be a multiple of two");var byte_string=[];for(i=0;i<hex_string.length;i+=2){var hex=hex_string.slice(i,i+2);byte_string.push(parseInt(hex,16))}return byte_string}function pad(num,size){for(num=num.toString();num.length<size;)num="0"+num;return num}function decode_float(bytes,cursor){var bytes=decode_int32(bytes,cursor),cursor=bytes>>>31==0?1:-1,e=bytes>>>23&255;return 255==e?8388607&bytes?NaN:1/0*cursor:cursor*(0==e?(8388607&bytes)<<1:8388607&bytes|8388608)*Math.pow(2,e-150)}function decode_uint32(bytes,cursor){var i=cursor.value+3;return bytes=256*(256*(256*bytes[i--]+bytes[i--])+bytes[i--])+bytes[+i],cursor.value+=4,bytes}function decode_int32(bytes,cursor){var i=cursor.value+3;return bytes=(((0|bytes[i--])<<8|bytes[i--])<<8|bytes[i--])<<8|bytes[+i],cursor.value+=4,bytes}function decode_uint16(bytes,cursor){var i=cursor.value+1;return bytes=256*bytes[i--]+bytes[+i],cursor.value+=2,bytes}function decode_int16(bytes,cursor){var result=0,i=cursor.value+1,result=(result=(result=128&bytes[i]?65535:result)<<8|bytes[i--])<<8|bytes[+i];return cursor.value+=2,result}function decode_uint8(bytes,cursor){bytes=bytes[cursor.value];return cursor.value+=1,bytes}function decode_int8(bytes,cursor){var result=0,i=cursor.value,result=(result=128&bytes[i]?16777215:result)<<8|bytes[+i];return cursor.value+=1,result}function decode_device_id(bytes,cursor){return decode_uint8(bytes,cursor).toString()+"-"+pad(decode_uint32(bytes,cursor),10)}function decode_sensor_data_config(bytes,cursor,protocol_version){config=decode_uint32(bytes,cursor);var result={};switch(result.frame_number=255&config,result.sequence_number=config>>8&3,result.axis="",config>>10&3){case 0:result.axis="x";break;case 1:result.axis="y";break;case 2:result.axis="z";break;default:throw new Error("Invalid axis value in sensor data config!")}switch(0==(config>>12&1)?result.unit="velocity":result.unit="acceleration",protocol_version){case 1:if(result.scale=4*(config>>13&63),0==result.scale)throw new Error("Invalid config.scale value!");break;case 2:var scale_coefficient=config>>13&15;if(scale_coefficient<1||15<scale_coefficient)throw new Error("Invalid config.scale coefficient value!");var scale_power=(config>>17&3)-2;result.scale=scale_coefficient*Math.pow(10,scale_power);break;default:throw new Error("Unsupported protocol version!")}if(result.start_frequency=config>>>19,result.start_frequency<0||8191<result.start_frequency)throw new Error("Invalid start_frequency value in sensor data config!");if(result.spectral_line_frequency=decode_uint8(bytes,cursor),0==result.spectral_line_frequency)throw new Error("Invalid spectral_line_frequency value in sensor data config!");return result}function decode_sensor_data_config_v3(bytes,cursor){var result={},b=(result.frame_number=decode_uint8(bytes,cursor),decode_uint8(bytes,cursor));switch(result.sequence_number=3&b,result.axis="",b>>2&3){case 0:result.axis="x";break;case 1:result.axis="y";break;case 2:result.axis="z";break;default:throw new Error("Invalid axis value in sensor data config!")}switch(b>>4&1){case 0:result.resolution="low_res";var binToHzFactor=1.62762;break;case 1:result.resolution="high_res";binToHzFactor=.8138}if(result.unit=0==(b>>5&1)?"velocity":"acceleration",result.start_frequency=decode_uint16(bytes,cursor),8191<result.start_frequency)throw new Error("Invalid start_frequency value in sensor data config!");if(result.spectral_line_frequency=decode_uint8(bytes,cursor),0==result.spectral_line_frequency)throw new Error("Invalid spectral_line_frequency value in sensor data config!");return result.scale=data_scale_lookup(decode_uint8(bytes,cursor)),{result:result,binToHzFactor:binToHzFactor}}function data_scale_lookup(scale_idx){if(127<=scale_idx)throw new Error("Invalid scale index in sensor data config!");return[.01,.0108175019990394,.0117018349499221,.0126584622963211,.0136932941195217,.014812723651136,.0160236667707382,.0173336047324401,.0187506303843729,.0202834981666202,.0219416781964925,.0237354147752836,.0256757896779659,.027774790616831,.0300453853020469,.0325016015566801,.0351586139811367,.03803283770244,.0411420297875284,.0445053989471126,.0481437242078435,.0520794832859547,.0563369914554751,.0609425517689466,.0659246175587139,.0713139682227294,.0771438993808804,.0834504285766365,.0902725177948457,.097652314170406,.105635410374919,.114271126290003,.123612813707458,.133718185938731,.144649674370014,.156474814165802,.169266661503788,.183104244918794,.198073053544165,.214265565266983,.231781818060089,.250730028020599,.271227257933203,.293400140488639,.317385660625428,.3433320018282,.371399461611073,.401761441841993,.434605520026269,.470134608167771,.508568206367245,.550143758902554,.59511812116874,.64376914654074,.696397402962432,.753328029867193,.814912746902074,.881532026865585,.953597446283568,1.03155422814513,1.11588399250775,1.20710773196486,1.30578903035857,1.41253754462275,1.52801277126748,1.65292812077436,1.78805532507451,1.93422920533864,2.09235282953511,2.26340309161917,2.44843674682223,2.64859694032709,2.86512026966378,3.09934442445761,3.35271645072817,3.62680169079642,3.92329345403096,4.24402347817979,4.59097324591799,4.96628622652541,5.37228111832403,5.81146617368716,6.28655469512105,6.80048179815422,7.35642254459641,7.95781155819499,8.60836424387529,9.31209974165798,10.0733657570639,10.8968654214094,11.7876863479359,12.7513320632845,13.7937560084995,14.9213983196205,16.1412256150957,17.4607740358243,18.8881958037304,20.4323095865101,22.1026549797064,23.9095514427051,25.8641620527597,27.9785624709206,30.2658155459431,32.7400520170796,35.4165578143412,38.3118684955729,41.4438714037792,44.8319161758313,48.496934285282,52.4615683578319,56.7503120583586,61.3896614137401,66.4082785063484,71.8371685495186,77.7098714389746,84.0626689636199,90.9348089558542,98.3687477662216,106.41041256041,115.109485059084,124.519708473503,134.699219533192,145.710907656935,157.622803486073,170.508499180478,184.447603073803,199.526231496888][scale_idx]}function decode_reboot_info(reboot_type,bytes,cursor){var result,reboot_payload=[0,0,0,0,0,0,0,0];switch(reboot_payload[0]+=decode_uint8(bytes,cursor),reboot_payload[1]+=decode_uint8(bytes,cursor),reboot_payload[2]+=decode_uint8(bytes,cursor),reboot_payload[3]+=decode_uint8(bytes,cursor),reboot_payload[4]+=decode_uint8(bytes,cursor),reboot_payload[5]+=decode_uint8(bytes,cursor),reboot_payload[6]+=decode_uint8(bytes,cursor),reboot_payload[7]+=decode_uint8(bytes,cursor),reboot_type){case 0:result="none";break;case 1:result="power cycle";break;case 2:result="swdog ("+String.fromCharCode(reboot_payload[0],reboot_payload[1],reboot_payload[2],reboot_payload[3]).replace(/[^\x20-\x7E]/g,"")+")";break;case 3:var payloadCursor={value:4};actualValue=decode_int32(reboot_payload,payloadCursor),result="assert (caller: 0x"+uint8_to_hex(reboot_payload[3])+uint8_to_hex(reboot_payload[2])+uint8_to_hex(reboot_payload[1])+uint8_to_hex(reboot_payload[0])+"; value: "+actualValue.toString()+")";break;case 4:result="application (0x"+uint8_to_hex(reboot_payload[3])+uint8_to_hex(reboot_payload[2])+uint8_to_hex(reboot_payload[1])+uint8_to_hex(reboot_payload[0])+")";break;case 5:result="system (error: 0x"+uint8_to_hex(reboot_payload[3])+uint8_to_hex(reboot_payload[2])+uint8_to_hex(reboot_payload[1])+uint8_to_hex(reboot_payload[0])+"; caller: 0x"+uint8_to_hex(reboot_payload[7])+uint8_to_hex(reboot_payload[6])+uint8_to_hex(reboot_payload[5])+uint8_to_hex(reboot_payload[4])+")";break;default:result="unknown (0x"+uint8_to_hex(reboot_payload[0])+", 0x"+uint8_to_hex(reboot_payload[1])+", 0x"+uint8_to_hex(reboot_payload[2])+", 0x"+uint8_to_hex(reboot_payload[3])+", 0x"+uint8_to_hex(reboot_payload[4])+", 0x"+uint8_to_hex(reboot_payload[5])+", 0x"+uint8_to_hex(reboot_payload[6])+", 0x"+uint8_to_hex(reboot_payload[7])+")"}return result}function decode_battery_voltage(bytes,cursor){return decode_uint8(bytes,cursor)*(2/255)+2}function uint8_to_hex(d){return("0"+Number(d).toString(16).toUpperCase()).slice(-2)}function uint16_to_hex(d){return("000"+Number(d).toString(16).toUpperCase()).slice(-4)}function uint32_to_hex(d){return("0000000"+Number(d).toString(16).toUpperCase()).slice(-8)}function message_type_lookup(type_id){return type_id<(type_names=["boot","activated","deactivated","sensor_event","device_status","base_configuration","sensor_configuration","sensor_data_configuration","sensor_data"]).length?type_names[type_id]:"unknown"}function config_type_lookup(type_id){return type_id<(type_names=["base","region","reserved","sensor","sensor_data","sensor_conditions"]).length?type_names[type_id]:"unknown"}function device_types_lookup(type_id){return type_id<(type_names=["","ts","vs-qt","vs-mt","tt","ld","vb"]).length?type_names[type_id]:"unknown"}function trigger_lookup(trigger_id){switch(trigger_id){case 0:return"timer";case 1:return"button";case 2:return"condition_0";case 3:return"condition_1";case 4:return"condition_2";case 5:return"condition_3";case 6:return"condition_4";case 7:return"condition_5";default:return"unknown"}}function rssi_lookup(rssi){switch(rssi){case 0:return"0..-79";case 1:return"-80..-99";case 2:return"-100..-129";case 3:return"<-129";default:return"unknown"}}function reboot_lookup_major(reboot_reason){switch(major_reboot_reason=15&reboot_reason){case 0:return"none";case 1:return"config update";case 2:return"firmware update";case 3:return"button reset";case 4:return"power";case 5:return"communication failure";default:return"system failure"}}function reboot_lookup_minor(reboot_reason){switch(major_reboot_reason=15&reboot_reason,minor_reboot_reason=reboot_reason>>4&15,major_reboot_reason){case 0:case 1:return"";case 2:switch(minor_reboot_reason){case 0:return"success";case 1:return"rejected";case 2:return"error";case 3:return"in progress";default:return"unknown"}case 3:return"";case 4:switch(minor_reboot_reason){case 0:return"black out";case 1:return"brown out";case 2:return"power safe state";default:return"unknown"}case 5:case 6:return"";default:return"unknown"}}function lookup_selection(selection){switch(selection){case 0:return"extended";case 1:return"min_only";case 2:return"max_only";case 3:return"avg_only";default:return"unknown"}}function deactivation_reason_lookup(deactivation_id){switch(deactivation_id){case 0:return"user_triggered";case 1:return"activation_user_timeout";case 2:return"activation_sensor_comm_fail";case 3:return"activation_sensor_meas_fail";default:return"unknown"}}function decode_boot_msg(bytes,cursor){var boot={};if(46!=bytes.length)throw new Error("Invalid boot message length "+bytes.length+" instead of 46");boot.base={};var device_type=decode_uint8(bytes,cursor),version_hash=(boot.base.device_type=device_types_lookup(device_type),decode_uint32(bytes,cursor)),config_crc=(boot.base.version_hash="0x"+uint32_to_hex(version_hash),decode_uint16(bytes,cursor)),reset_flags=(boot.base.config_crc="0x"+uint16_to_hex(config_crc),decode_uint8(bytes,cursor)),bist=(boot.base.reset_flags="0x"+uint8_to_hex(reset_flags),boot.base.reboot_counter=decode_uint8(bytes,cursor),base_reboot_type=decode_uint8(bytes,cursor),boot.base.reboot_info=decode_reboot_info(base_reboot_type,bytes,cursor),decode_uint8(bytes,cursor)),device_type=(boot.base.bist="0x"+uint8_to_hex(bist),boot.sensor={},decode_uint8(bytes,cursor)),version_hash=(boot.sensor.device_type=device_types_lookup(device_type),boot.sensor.device_id=decode_device_id(bytes,cursor),decode_uint32(bytes,cursor)),config_crc=(boot.sensor.version_hash="0x"+uint32_to_hex(version_hash),decode_uint16(bytes,cursor)),device_type=(boot.sensor.config_crc="0x"+uint16_to_hex(config_crc),decode_uint16(bytes,cursor)),reset_flags=(boot.sensor.data_config_crc="0x"+uint16_to_hex(device_type),decode_uint8(bytes,cursor)),bist=(boot.sensor.reset_flags="0x"+uint8_to_hex(reset_flags),boot.sensor.reboot_counter=decode_uint8(bytes,cursor),sensor_reboot_type=decode_uint8(bytes,cursor),boot.sensor.reboot_info=decode_reboot_info(sensor_reboot_type,bytes,cursor),decode_uint8(bytes,cursor));return boot.sensor.bist="0x"+uint8_to_hex(bist),boot}function decode_boot_msg_v3(bytes,cursor){if(3!=bytes.length&&35!=bytes.length)throw new Error("Invalid boot message length "+bytes.length+" instead of 3 or 35");var boot={base:{},sensor:{}};if(base_reboot_reason=decode_uint8(bytes,cursor),boot.base.reboot_reason={},boot.base.reboot_reason.major=reboot_lookup_major(base_reboot_reason),boot.base.reboot_reason.minor=reboot_lookup_minor(base_reboot_reason),sensor_reboot_reason=decode_uint8(bytes,cursor),boot.sensor.reboot_reason={},boot.sensor.reboot_reason.major=reboot_lookup_major(sensor_reboot_reason),boot.sensor.reboot_reason.minor=reboot_lookup_minor(sensor_reboot_reason),35==bytes.length){boot.debug="0x";for(var i=cursor.value;i<bytes.length;i++)boot.debug=boot.debug+uint8_to_hex(bytes[i])}return boot}function decode_activated_msg(bytes,cursor){var activated={};if(7!=bytes.length)throw new Error("Invalid activated message length "+bytes.length+" instead of 7");activated.sensor={};var device_type=decode_uint8(bytes,cursor);return activated.sensor.device_type=device_types_lookup(device_type),activated.sensor.device_id=decode_device_id(bytes,cursor),activated}function decode_activated_msg_v3(bytes,cursor){var activated={};if(8!=bytes.length)throw new Error("Invalid activated message length "+bytes.length+" instead of 8");activated.sensor={};var device_type=decode_uint8(bytes,cursor);return activated.sensor.device_type=device_types_lookup(device_type),activated.sensor.device_id=decode_device_id(bytes,cursor),activated.base={},device_type=decode_uint8(bytes,cursor),activated.base.device_type=device_types_lookup(device_type),activated}function decode_deactivated_msg(bytes,cursor){var deactivated={};if(3!=bytes.length)throw new Error("Invalid deactivated message length "+bytes.length+" instead of 3");var reason=decode_uint8(bytes,cursor);if(deactivated.reason=deactivation_reason_lookup(reason),0!=decode_uint8(bytes,cursor))throw new Error("Unsupported deactivated reason length");return deactivated}function decode_sensor_event_msg(bytes,cursor){var sensor_event={};if(45!=bytes.length)throw new Error("Invalid sensor_event message length "+bytes.length+" instead of 45");trigger=decode_uint8(bytes,cursor),sensor_event.trigger=trigger_lookup(trigger),sensor_event.rms_velocity={},sensor_event.rms_velocity.x={},sensor_event.rms_velocity.x.min=decode_uint16(bytes,cursor)/100,sensor_event.rms_velocity.x.max=decode_uint16(bytes,cursor)/100,sensor_event.rms_velocity.x.avg=decode_uint16(bytes,cursor)/100,sensor_event.rms_velocity.y={},sensor_event.rms_velocity.y.min=decode_uint16(bytes,cursor)/100,sensor_event.rms_velocity.y.max=decode_uint16(bytes,cursor)/100,sensor_event.rms_velocity.y.avg=decode_uint16(bytes,cursor)/100,sensor_event.rms_velocity.z={},sensor_event.rms_velocity.z.min=decode_uint16(bytes,cursor)/100,sensor_event.rms_velocity.z.max=decode_uint16(bytes,cursor)/100,sensor_event.rms_velocity.z.avg=decode_uint16(bytes,cursor)/100,sensor_event.acceleration={},sensor_event.acceleration.x={},sensor_event.acceleration.x.min=decode_int16(bytes,cursor)/100,sensor_event.acceleration.x.max=decode_int16(bytes,cursor)/100,sensor_event.acceleration.x.avg=decode_int16(bytes,cursor)/100,sensor_event.acceleration.y={},sensor_event.acceleration.y.min=decode_int16(bytes,cursor)/100,sensor_event.acceleration.y.max=decode_int16(bytes,cursor)/100,sensor_event.acceleration.y.avg=decode_int16(bytes,cursor)/100,sensor_event.acceleration.z={},sensor_event.acceleration.z.min=decode_int16(bytes,cursor)/100,sensor_event.acceleration.z.max=decode_int16(bytes,cursor)/100,sensor_event.acceleration.z.avg=decode_int16(bytes,cursor)/100,sensor_event.temperature={},sensor_event.temperature.min=decode_int16(bytes,cursor)/100,sensor_event.temperature.max=decode_int16(bytes,cursor)/100,sensor_event.temperature.avg=decode_int16(bytes,cursor)/100;bytes=decode_uint8(bytes,cursor);return sensor_event.condition_0=1&bytes,sensor_event.condition_1=bytes>>1&1,sensor_event.condition_2=bytes>>2&1,sensor_event.condition_3=bytes>>3&1,sensor_event.condition_4=bytes>>4&1,sensor_event.condition_5=bytes>>5&1,sensor_event}function decode_sensor_event_msg_v3(bytes,curser){if(11==bytes.length)return decode_sensor_event_msg_normal(bytes,curser);if(45==bytes.length)return decode_sensor_event_msg_extended(bytes,curser);throw new Error("Invalid sensor_event message length "+bytes.length+" instead of 11 or 45")}function decode_sensor_event_msg_normal(bytes,cursor){var sensor_event={};if(selection=decode_uint8(bytes,cursor),sensor_event.selection=lookup_selection(selection),"extended"==sensor_event.selection)throw new Error("Mismatch between extended bit flag and message length!");var conditions=decode_uint8(bytes,cursor);if(sensor_event.condition_0=1&conditions,sensor_event.condition_1=conditions>>1&1,sensor_event.condition_2=conditions>>2&1,sensor_event.condition_3=conditions>>3&1,sensor_event.condition_4=conditions>>4&1,sensor_event.trigger=lookup_trigger(conditions>>6&3),sensor_event.rms_velocity={},x=decode_uint16(bytes,cursor)/100,y=decode_uint16(bytes,cursor)/100,z=decode_uint16(bytes,cursor)/100,temperature=decode_int16(bytes,cursor)/100,"min_only"==sensor_event.selection)sensor_event.rms_velocity={x:{min:x},y:{min:y},z:{min:z}},sensor_event.temperature={min:temperature};else if("max_only"==sensor_event.selection)sensor_event.rms_velocity={x:{max:x},y:{max:y},z:{max:z}},sensor_event.temperature={max:temperature};else{if("avg_only"!=sensor_event.selection)throw new Error("Only min, max, or, avg is accepted!");sensor_event.rms_velocity={x:{avg:x},y:{avg:y},z:{avg:z}},sensor_event.temperature={avg:temperature}}return sensor_event}function decode_sensor_event_msg_extended(bytes,cursor){var sensor_event={};if(selection=decode_uint8(bytes,cursor),sensor_event.selection=lookup_selection(selection),"extended"!=sensor_event.selection)throw new Error("Mismatch between extended bit flag and message length!");var conditions=decode_uint8(bytes,cursor);return sensor_event.condition_0=1&conditions,sensor_event.condition_1=conditions>>1&1,sensor_event.condition_2=conditions>>2&1,sensor_event.condition_3=conditions>>3&1,sensor_event.condition_4=conditions>>4&1,sensor_event.trigger=lookup_trigger(conditions>>6&3),sensor_event.rms_velocity={},sensor_event.rms_velocity.x={},sensor_event.rms_velocity.x.min=decode_velocity_v3(bytes,cursor),sensor_event.rms_velocity.x.max=decode_velocity_v3(bytes,cursor),sensor_event.rms_velocity.x.avg=decode_velocity_v3(bytes,cursor),sensor_event.rms_velocity.y={},sensor_event.rms_velocity.y.min=decode_velocity_v3(bytes,cursor),sensor_event.rms_velocity.y.max=decode_velocity_v3(bytes,cursor),sensor_event.rms_velocity.y.avg=decode_velocity_v3(bytes,cursor),sensor_event.rms_velocity.z={},sensor_event.rms_velocity.z.min=decode_velocity_v3(bytes,cursor),sensor_event.rms_velocity.z.max=decode_velocity_v3(bytes,cursor),sensor_event.rms_velocity.z.avg=decode_velocity_v3(bytes,cursor),sensor_event.acceleration={},sensor_event.acceleration.x={},sensor_event.acceleration.x.min=decode_acceleration_v3(bytes,cursor),sensor_event.acceleration.x.peak=decode_acceleration_v3(bytes,cursor),sensor_event.acceleration.x.rms=decode_acceleration_v3(bytes,cursor),sensor_event.acceleration.y={},sensor_event.acceleration.y.min=decode_acceleration_v3(bytes,cursor),sensor_event.acceleration.y.peak=decode_acceleration_v3(bytes,cursor),sensor_event.acceleration.y.rms=decode_acceleration_v3(bytes,cursor),sensor_event.acceleration.z={},sensor_event.acceleration.z.min=decode_acceleration_v3(bytes,cursor),sensor_event.acceleration.z.peak=decode_acceleration_v3(bytes,cursor),sensor_event.acceleration.z.rms=decode_acceleration_v3(bytes,cursor),sensor_event.temperature={},sensor_event.temperature.min=decode_acceleration_v3(bytes,cursor),sensor_event.temperature.max=decode_acceleration_v3(bytes,cursor),sensor_event.temperature.avg=decode_acceleration_v3(bytes,cursor),sensor_event}function decode_velocity_v3(bytes,cursor){return decode_uint16(bytes,cursor)/100}function decode_acceleration_v3(bytes,cursor){return decode_int16(bytes,cursor)/100}function decode_temperature_v3(bytes,cursor){return decode_int16(bytes,cursor)/100}function decode_device_status_msg(bytes,cursor){var device_status={};if(24!=bytes.length)throw new Error("Invalid device_status message length "+bytes.length+" instead of 24");device_status.base={},device_status.sensor={};var config_crc=decode_uint16(bytes,cursor),bist=(device_status.base.config_crc="0x"+uint16_to_hex(config_crc),device_status.base.battery_voltage={},device_status.base.battery_voltage.low=decode_uint16(bytes,cursor)/1e3,device_status.base.battery_voltage.high=decode_uint16(bytes,cursor)/1e3,device_status.base.battery_voltage.settle=decode_uint16(bytes,cursor)/1e3,device_status.base.temperature={},device_status.base.temperature.min=decode_int8(bytes,cursor),device_status.base.temperature.max=decode_int8(bytes,cursor),device_status.base.temperature.avg=decode_int8(bytes,cursor),device_status.base.lvds_error_counter=decode_uint8(bytes,cursor),device_status.base.lora_tx_counter=decode_uint8(bytes,cursor),device_status.base.avg_rssi=-decode_uint8(bytes,cursor),device_status.base.avg_snr=decode_int8(bytes,cursor),decode_uint8(bytes,cursor)),device_type=(device_status.base.bist="0x"+uint8_to_hex(bist),decode_uint8(bytes,cursor)),config_crc=(device_status.sensor.device_type=device_types_lookup(device_type),decode_uint16(bytes,cursor)),device_type=(device_status.sensor.config_crc="0x"+uint16_to_hex(config_crc),decode_uint16(bytes,cursor)),bist=(device_status.sensor.data_config_crc="0x"+uint16_to_hex(device_type),device_status.sensor.event_counter=decode_uint8(bytes,cursor),decode_uint8(bytes,cursor));return device_status.sensor.bist="0x"+uint8_to_hex(bist),device_status}function decode_device_status_msg_v3(bytes,cursor){if(9!=bytes.length&&12!=bytes.length)throw new Error("Invalid device status message length "+bytes.length+" instead of 9 or 12");var device_status={base:{},sensor:{}},bist=(device_status.base.battery_voltage=decode_battery_voltage(bytes,cursor),device_status.base.temperature=decode_int8(bytes,cursor),device_status.base.lora_tx_counter=decode_uint16(bytes,cursor),rssi=decode_uint8(bytes,cursor),device_status.base.avg_rssi=rssi_lookup(rssi),decode_uint8(bytes,cursor)),bist=(device_status.base.bist="0x"+uint8_to_hex(bist),device_status.sensor.event_counter=decode_uint8(bytes,cursor),decode_uint8(bytes,cursor));if(device_status.sensor.bist="0x"+uint8_to_hex(bist),12==bytes.length){device_status.debug="0x";for(var i=cursor.value;i<bytes.length;i++)device_status.debug=device_status.debug+uint8_to_hex(bytes[i])}return device_status}function decode_config_update_ans_msg(bytes,cursor){if(6!=bytes.length)throw new Error("Invalid config update ans message length "+bytes.length+" instead of 6");var ans={},ans=decode_config_header(bytes,cursor);return tag=decode_uint32(bytes,cursor),ans.tag="0x"+uint32_to_hex(tag),counter=decode_uint8(bytes,cursor),ans.counter=15&counter,ans}function lookup_trigger(trigger){switch(trigger){case 0:return"condition change";case 1:return"periodic";case 2:return"button press";default:return"unknown"}}function decode_sensor_data_msg(bytes,cursor,protocol_version){var obj,sensor_data={};if(46!=bytes.length)throw new Error("Invalid sensor_data message length "+bytes.length+" instead of 46");data_offset=3==protocol_version?(obj=decode_sensor_data_config_v3(bytes,cursor),sensor_data.config=obj.result,obj=obj.binToHzFactor,chunk_size=39,7):(sensor_data.config=decode_sensor_data_config(bytes,cursor,protocol_version),obj=1.62762,chunk_size=40,6),sensor_data.raw=bytes.slice(data_offset),sensor_data.frequency=[],sensor_data.magnitude=[];var spectral_line_frequency=sensor_data.config.spectral_line_frequency*obj,frequency_offset=sensor_data.config.start_frequency*obj;for(frequency_offset+=sensor_data.config.frame_number*chunk_size*spectral_line_frequency,i=0;i<chunk_size;i++)sensor_data.frequency[i]=frequency_offset+i*spectral_line_frequency,sensor_data.magnitude[i]=sensor_data.raw[i]*sensor_data.config.scale/255;return sensor_data}function handle_generic_messages(fPort,bytes,decoded){var cursor={value:0};return 203===fPort&&(1===decode_uint8(bytes,cursor)&&(decoded.DevVersion={FW_version:"0x"+uint32_to_hex(decode_uint32(bytes,cursor)),HW_version:"0x"+uint32_to_hex(decode_uint32(bytes,cursor))}),!0)}"undefined"!=typeof module&&(module.exports={decodeUplink:decodeUplink,Decode:Decode,Decoder:Decoder,DecodeHexString:DecodeHexString,DecodeRebootInfo:DecodeRebootInfo,decode_float:decode_float,decode_uint32:decode_uint32,decode_int32:decode_int32,decode_uint16:decode_uint16,decode_int16:decode_int16,decode_uint8:decode_uint8,decode_int8:decode_int8,decode_device_id:decode_device_id,decode_reboot_info:decode_reboot_info,decode_battery_voltage:decode_battery_voltage,decode_sensor_data_config:decode_sensor_data_config,decode_sensor_data_config_v3:decode_sensor_data_config_v3,from_hex_string:from_hex_string,decode_velocity_v3:decode_velocity_v3,decode_acceleration_v3:decode_acceleration_v3,decode_temperature_v3:decode_temperature_v3}),Object.prototype.in=function(){for(var i=0;i<arguments.length;i++)if(arguments[i]==this)return!0;return!1};